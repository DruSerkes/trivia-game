{"version":3,"sources":["helpers/renderColor.ts","components/Result.tsx","helpers/addAndRemoveClass.ts","components/Answer.tsx","helpers/showFeedback.ts","components/QuizCard.tsx","helpers/shuffle.ts","components/Start.tsx","redux/actions.ts","redux/types.ts","components/Feedback.tsx","components/TriviaGame.tsx","components/Footer.tsx","App.tsx","redux/questionsReducer.ts","redux/rootReducer.ts","redux/store.ts","index.tsx"],"names":["renderColor","numCorrect","numAnswered","Result","Box","className","Typography","variant","style","color","addClassToAnswer","tagName","classList","parentElement","add","addShowCorrect","correctAnswer","document","querySelector","Answer","answer","handleAnswerQuestion","correct","useState","mounted","setMounted","renderHTML","dangerouslySetInnerHTML","__html","handleClick","e","nativeEvent","setTimeout","useEffect","answerElements","querySelectorAll","Array","from","forEach","el","remove","removeSelectedAndShowCorrect","ListItem","id","divider","onClick","correctResponses","incorrectResponses","QuizCard","question","answerQuestion","chosen","useRef","shuffledAnswers","array","i","length","j","Math","floor","random","shuffle","incorrect_answers","concat","correct_answer","current","target","showIfCorrect","feedback","randIdx","positiveResponse","textContent","negativeResponse","setAttribute","showFeedback","hideFeedback","data-testid","List","map","ans","key","Start","startGame","amount","setAmount","difficulty","setDifficulty","type","setType","TextField","label","value","onChange","FormControl","component","FormLabel","RadioGroup","row","aria-label","name","FormControlLabel","control","Radio","labelPlacement","Button","fullWidth","BASE_URL","gotQuestions","questionData","payload","results","data","questionsFail","Feedback","INITIAL_QUESTION_STATE","TriviaGame","dispatch","useDispatch","questions","useSelector","state","currentQuestion","setCurrentQuestion","setNumAnswered","setNumCorrect","answered","a","fetch","response","json","console","log","getQuestions","Footer","href","rel","App","gutterBottom","INITIAL_STATE","questionsReducer","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","getElementById"],"mappings":"iRAAaA,EAAc,SAACC,EAAoBC,GAC5C,OAAID,EAAaC,EAAc,GACpB,MACAD,EAAaC,GAAe,GAC5B,SACAD,EAAaC,EAAc,GAC3B,SAEFD,EAAaC,EAAc,EACzB,QAEA,QCFFC,EAAS,SAAC,GAA8C,IAA5CF,EAA2C,EAA3CA,WAAYC,EAA+B,EAA/BA,YACjC,OACI,gBAACE,EAAA,EAAD,CAAKC,UAAU,UACX,gBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,cACA,gBAACD,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAO,CAAEC,MAAOT,EAAYC,EAAYC,KAApE,gBAAkGD,EAAlG,WAAsHC,EAAtH,YACA,gBAACI,EAAA,EAAD,CAAYC,QAAQ,MAApB,iB,SCdCG,EAAmB,SAACL,EAAmBM,EAAiBC,EAAyBC,GAC1E,OAAZF,EACAC,EAAUE,IAAIT,GAED,OAAbQ,QAAa,IAAbA,KAAeD,UAAUE,IAAIT,IAuBxBU,EAAiB,WAC1B,IAAMC,EAAgBC,SAASC,cAAc,mBAChC,OAAbF,QAAa,IAAbA,KAAeJ,UAAUE,IAAI,iBClB1B,SAASK,EAAT,GAAyE,IAAvDC,EAAsD,EAAtDA,OAAQC,EAA8C,EAA9CA,qBAAsBC,EAAwB,EAAxBA,QAAwB,EAC7CC,oBAAS,GADoC,mBACpEC,EADoE,KAC3DC,EAD2D,KAErEC,EAAa,kBAAO,wBAAMrB,UAAU,aAAasB,wBAAyB,CAAEC,OAAQR,MACpFS,EAAc,SAAC,GAA0C,IAA3BC,EAA0B,EAAvCC,YACnBV,EAAqBD,EAAQU,EAAGR,GAChCU,YAAW,kBAAMP,GAAYD,KAAU,MAK3C,OAFAS,qBAAU,kBDuB8B,WACxC,IAAMC,EAAiBjB,SAASkB,iBAAiB,WACjDC,MAAMC,KAAKH,GAAgBI,SAAQ,SAACC,GAChCA,EAAG3B,UAAU4B,OAAO,YACpBD,EAAG3B,UAAU4B,OAAO,mBC3BRC,KAAgC,CAACjB,IAE7CF,EACO,gBAACoB,EAAA,EAAD,CAAUC,GAAIvB,EAAQf,UAAU,wBAAwBuC,SAAO,EAACC,QAAShB,GAAeH,KAExF,gBAACgB,EAAA,EAAD,CAAUC,GAAIvB,EAAQf,UAAU,0BAA0BuC,SAAO,EAACC,QAAShB,GAAeH,K,aCxB5FoB,EAAmB,CAAC,YAAa,iBAAmB,oBAAqB,YAAa,aAAc,uBACpGC,EAAqB,CAAC,QAAS,YAAa,gBAAkB,QAAS,QAAS,UCahFC,EAAW,SAAC,GAAiD,IAA/CC,EAA8C,EAA9CA,SAAUC,EAAoC,EAApCA,eAC3BC,EAASC,kBAAO,GAEhBC,ECjBa,SAACC,GACpB,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACvC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADD,EAIhB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAJgC,KAI5BD,EAAMG,GAJsB,KAM3C,OAAOH,EDU2BO,CADX,OAAGZ,QAAH,IAAGA,OAAH,EAAGA,EAAUa,kBAAkBC,OAAOd,EAASe,iBAGhE3C,EAAuB,SAACD,EAAgBU,EAAeR,GACrD6B,EAAOc,UACXd,EAAOc,SAAU,EHLI,SAACnC,EAAeR,GACzC,GAAKQ,EAAEoC,OAAP,CAD4E,MAE9BpC,EAAEoC,OAAxCtD,EAFoE,EAEpEA,UAAWD,EAFyD,EAEzDA,QAASE,EAFgD,EAEhDA,cACxBS,GAGAP,IAFAL,EAAiB,WAAYC,EAASC,EAAWC,IGEjDsD,CAAcrC,EAAGR,GDnBG,SAACA,GACzB,IAAM8C,EAAWnD,SAASC,cAAc,aACxC,GAAKkD,EAAL,CAEA,GAAI9C,EAAS,CACT,IAAM+C,EAAUX,KAAKC,MAAMD,KAAKE,SAAWd,EAAiBU,QACtDc,EAAmBxB,EAAiBuB,GAC1CD,EAASG,YAAcD,EACvBF,EAASxD,UAAUE,IAAI,eACpB,CACH,IAAMuD,EAAUX,KAAKC,MAAMD,KAAKE,SAAWd,EAAiBU,QACtDgB,EAAmBzB,EAAmBsB,GAC5CD,EAASG,YAAcC,EACvBJ,EAASxD,UAAUE,IAAI,aAGnB,OAARsD,QAAQ,IAARA,KAAUK,aAAa,QAAS,mBCI5BC,CAAapD,GACbU,YAAW,YDFS,WACxB,IAAMoC,EAAWnD,SAASC,cAAc,aACnCkD,IACG,OAARA,QAAQ,IAARA,KAAUK,aAAa,QAAS,mBAChCL,EAASG,YAAc,GACvBH,EAASxD,UAAU4B,OAAO,UAAW,cCF7BmC,GACAzB,EAAe9B,GACf+B,EAAOc,SAAU,IAClB,OAGP,OACI,gBAAC7D,EAAA,EAAD,CAAKC,UAAU,WAAWuE,cAAY,YAClC,gBAACtE,EAAA,EAAD,CAAYC,QAAQ,KAAKoB,wBAAyB,CAAEC,OAAM,OAAEqB,QAAF,IAAEA,OAAF,EAAEA,EAAUA,YACtE,gBAAC4B,EAAA,EAAD,CAAMxE,UAAU,gBACXgD,EAAgByB,KAAI,SAAAC,GACjB,OAAIA,IAAQ9B,EAASe,eACV,gBAAC7C,EAAD,CAAQE,qBAAsBA,EAAsBD,OAAQ2D,EAAKC,IAAKD,EAAKzD,SAAO,IAElF,gBAACH,EAAD,CAAQE,qBAAsBA,EAAsBD,OAAQ2D,EAAKC,IAAKD,U,uEE/BxFE,EAAQ,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,UAA4B,EACpB3D,mBAAiB,MADG,mBACzC4D,EADyC,KACjCC,EADiC,OAEZ7D,mBAAiB,IAFL,mBAEzC8D,EAFyC,KAE7BC,EAF6B,OAGxB/D,mBAAiB,YAHO,mBAGzCgE,EAHyC,KAGnCC,EAHmC,KAUhD,OACI,gBAACpF,EAAA,EAAD,CAAKC,UAAU,SACX,gBAACoF,EAAA,EAAD,CAAWC,MAAM,sBAAsBH,KAAK,SAASI,MAAOR,EAAQS,SAPjD,SAAC9D,GAAD,OAAkDsD,EAAUtD,EAAEoC,OAAOyB,UAQxF,gBAACE,EAAA,EAAD,CAAaC,UAAU,YACnB,gBAACC,EAAA,EAAD,CAAWD,UAAU,UAArB,cACA,gBAACE,EAAA,EAAD,CAAYC,KAAG,EAACC,aAAW,aAAaC,KAAK,aAAaR,MAAON,EAAYO,SAT1D,SAAC9D,GAAD,OAAkDwD,EAAcxD,EAAEoC,OAAOyB,SAUxF,gBAACS,EAAA,EAAD,CAAkBT,MAAM,OAAOU,QAAS,gBAACC,EAAA,EAAD,MAAWZ,MAAM,OAAOa,eAAe,QAC/E,gBAACH,EAAA,EAAD,CAAkBT,MAAM,SAASU,QAAS,gBAACC,EAAA,EAAD,MAAWZ,MAAM,SAASa,eAAe,QACnF,gBAACH,EAAA,EAAD,CAAkBT,MAAM,OAAOU,QAAS,gBAACC,EAAA,EAAD,MAAWZ,MAAM,OAAOa,eAAe,QAC/E,gBAACH,EAAA,EAAD,CAAkBT,MAAM,GAAGU,QAAS,gBAACC,EAAA,EAAD,MAAWZ,MAAM,eAAea,eAAe,UAG3F,gBAACV,EAAA,EAAD,CAAaC,UAAU,YACnB,gBAACC,EAAA,EAAD,CAAWD,UAAU,UAArB,QACA,gBAACE,EAAA,EAAD,CAAYC,KAAG,EAACC,aAAW,OAAOC,KAAK,OAAOR,MAAOJ,EAAMK,SAjB9C,SAAC9D,GAAD,OAAkD0D,EAAQ1D,EAAEoC,OAAOyB,SAkB5E,gBAACS,EAAA,EAAD,CAAkBT,MAAM,WAAWU,QAAS,gBAACC,EAAA,EAAD,MAAWZ,MAAM,kBAAkBa,eAAe,QAC9F,gBAACH,EAAA,EAAD,CAAkBT,MAAM,UAAUU,QAAS,gBAACC,EAAA,EAAD,MAAWZ,MAAM,aAAaa,eAAe,UAGhG,gBAACC,EAAA,EAAD,CAAQjG,QAAQ,YAAYkG,WAAS,EAAChG,MAAM,UAAUoC,QArBzC,kBAAMqC,EAAUC,EAAQE,EAAYE,KAqBjD,oB,yBClCNmB,EAAQ,8BAsBP,SAASC,EAAaC,GAK5B,MAAO,CACNrB,KC/B2B,gBDgC3BsB,QANeD,EAAaE,QAAQhC,KAAI,SAACiC,GAEzC,MAAO,CAAE9D,SAD6D8D,EAA9D9D,SACWe,eADmD+C,EAApD/C,eACiBF,kBADmCiD,EAApCjD,uBAe7B,SAASkD,IACf,MAAO,CACNzB,KC1C4B,kBCEvB,IAAM0B,EAAW,kBAAO,qBAAI5G,UAAU,WAAWuE,cAAY,cCO9DsC,EAAyB,CAC9BjE,SAAU,GACVe,eAAgB,GAChBF,kBAAmB,IAGPqD,EAAa,WACzB,IAAMC,EAAWC,cACXC,EAAYC,aAAY,SAACC,GAAD,OAAsBA,EAAMF,aAF3B,EAGe/F,mBAAuB2F,GAHtC,mBAGxBO,EAHwB,KAGPC,EAHO,OAIOnG,mBAAS,GAJhB,mBAIxBrB,EAJwB,KAIXyH,EAJW,OAKKpG,mBAAS,GALd,mBAKxBtB,EALwB,KAKZ2H,EALY,KA6B/B,OALA3F,qBAAU,WACLqF,EAAU9D,QAAQkE,GAAmB,kBAAMJ,EAAUpH,QACvD,CAACoH,EAAWpH,IAId,kBAACE,EAAA,EAAD,CAAKC,UAAU,cAEbH,EAAcoH,EAAU9D,QAAUiE,IAAoBP,GAA0B,kBAAC,EAAD,CAAUjE,SAAUwE,EAAiBvE,eAzBjG,SAAC9B,GACnBqG,GAAmBrG,IAAWqG,EAAgBzD,gBACjD4D,GAAc,SAACtG,GAAD,OAAaA,EAAU,KACrCqG,GAAe,SAACE,GAAD,OAAcA,EAAW,MAExCF,GAAe,SAACE,GAAD,OAAcA,EAAW,QAsBjB,IAArBP,EAAU9D,QAAgBtD,IAAgBoH,EAAU9D,QAAU,kBAAC,EAAD,CAAQvD,WAAYA,EAAYC,YAAaA,KAE3GA,IAAgBoH,EAAU9D,SAAW8D,EAAU9D,SAAW,kBAAC,EAAD,CAAO0B,UApBnD,SAACC,EAAgBE,EAAoBE,GACtD6B,EHGM,CACN7B,KCrC8B,qBEkC9B6B,EH9BK,WAA+E,IAAzDjC,EAAwD,uDAA/C,KAAME,EAAyC,uCAApBE,EAAoB,uDAAb,WACvE,8CAAO,WAAgB6B,GAAhB,qBAAAU,EAAA,mEAEDzC,EAFC,iCAGmB0C,MAAM,GAAD,OAAIrB,EAAJ,mBAAuBvB,EAAvB,iBAAsCI,EAAtC,uBAAyDF,IAHjF,cAGE2C,EAHF,gBAIeA,EAASC,OAJxB,OAIElB,EAJF,OAKJK,EAAST,EAAaI,IALlB,yCAOmBgB,MAAM,GAAD,OAAIrB,EAAJ,mBAAuBvB,EAAvB,iBAAsCI,IAP9D,eAOEyC,EAPF,iBAQeA,EAASC,OARxB,QAQElB,EARF,OASJK,EAAST,EAAaI,IATlB,0DAaLmB,QAAQC,IAAR,MACAf,EAASJ,KAdJ,0DAAP,sDG6BUoB,CAAajD,EAAQE,EAAYE,IAC1CmC,GAAmB,kBAAMR,KACzBU,GAAc,kBAAM,KACpBD,GAAe,kBAAM,QAiBpB,kBAAC,EAAD,QCrDUU,EAAS,WAClB,OACI,4BAAQhI,UAAU,UACd,2BACI,uBAAGuE,cAAY,SAAS0D,KAAK,+BAA+BpE,OAAO,SAASqE,IAAI,uBAAhF,0BCUDC,MATf,WACM,OACM,kBAACpI,EAAA,EAAD,CAAKC,UAAU,OACT,kBAACC,EAAA,EAAD,CAAYmI,cAAY,EAAClI,QAAQ,MAAjC,iBACA,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,gCCVZmI,EAAgC,GAevBC,EAbU,WAA4E,IAA3EnB,EAA0E,uDAAlEkB,EAAeE,EAAmD,uCACnG,OAAQA,EAAOrD,MACd,ILN2B,gBKO1B,OAAO,YAAIqD,EAAO/B,SACnB,ILP8B,mBKQ7B,MAAO,GACR,ILR4B,iBKS3B,MAAO,CAAC,CAAE5D,SAAU,uCAAwCe,eAAgB,GAAIF,kBAAmB,KACpG,QACC,OAAO0D,ICRKqB,EAFKC,0BAAgB,CAAExB,UAAWqB,ICMlCI,EAJDC,sBAAYH,EAAaI,8BAAoBC,0BAAgBC,OCG3EC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,IAAD,CAAUP,MAAOA,GAChB,kBAAC,EAAD,QAGF9H,SAASsI,eAAe,W","file":"static/js/main.ee2d7f72.chunk.js","sourcesContent":["export const renderColor = (numCorrect: number, numAnswered: number) => {\n    if (numCorrect / numAnswered < .3) {\n        return 'red';\n    } else if (numCorrect / numAnswered <= .5) {\n        return 'orange';\n    } else if (numCorrect / numAnswered < .7) {\n        return 'yellow';\n    }\n    else if (numCorrect / numAnswered < 1) {\n        return 'green';\n    } else {\n        return 'blue';\n    }\n}","import * as React from 'react';\nimport { Box, Typography } from '@material-ui/core'\nimport { renderColor } from '../helpers/renderColor'\n\ntype ResultTypes = {\n    numCorrect: number;\n    numAnswered: number;\n}\n\nexport const Result = ({ numCorrect, numAnswered }: ResultTypes) => {\n    return (\n        <Box className=\"Result\">\n            <Typography variant=\"h3\">Game Over!</Typography>\n            <Typography variant=\"body1\" style={{ color: renderColor(numCorrect, numAnswered) }}>You answered {numCorrect} out of {numAnswered} correct</Typography>\n            <Typography variant=\"h5\">Play Again?</Typography>\n        </Box>\n    )\n}","export const addClassToAnswer = (className: string, tagName: string, classList: DOMTokenList, parentElement?: HTMLElement | null,): void => {\n    if (tagName === 'LI') {\n        classList.add(className);\n    } else {\n        parentElement?.classList.add(className);;\n    }\n}\n\nexport const removeClassFromAnswer = (className: string, tagName: string, classList: DOMTokenList, parentElement?: HTMLElement | null): void => {\n    if (tagName === 'LI') {\n        classList.remove(className);\n    } else {\n        parentElement?.classList.add(className);\n    }\n}\n\nexport const showIfCorrect = (e: MouseEvent, correct?: Boolean | null): void => {\n    if (!e.target) return;\n    const { classList, tagName, parentElement } = e.target as HTMLLIElement;\n    if (correct) {\n        addClassToAnswer('selected', tagName, classList, parentElement);\n    } else {\n        addShowCorrect();\n        addClassToAnswer('selected', tagName, classList, parentElement);\n    }\n}\n\nexport const addShowCorrect = () => {\n    const correctAnswer = document.querySelector('.Correct-Answer');\n    correctAnswer?.classList.add('show-correct');\n}\n\nexport const removeFeedback = (e: MouseEvent, correct?: Boolean | null): void => {\n    if (!e.target) return;\n    const { classList, tagName, parentElement } = e.target as HTMLLIElement;\n    if (correct) {\n        removeClassFromAnswer('correct', tagName, classList, parentElement);\n    } else {\n        removeClassFromAnswer('incorrect', tagName, classList, parentElement);\n    }\n}\n\nexport const removeSelectedAndShowCorrect = () => {\n    const answerElements = document.querySelectorAll('.Answer');\n    Array.from(answerElements).forEach((el) => {\n        el.classList.remove('selected');\n        el.classList.remove('show-correct');\n    });\n}","import * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { ListItem } from '@material-ui/core'\nimport { removeSelectedAndShowCorrect } from '../helpers/addAndRemoveClass'\n\ntype AnswerProps = {\n    answer: string;\n    handleAnswerQuestion: (answer: string, e: MouseEvent, correct: boolean | null | undefined) => void;\n    correct?: boolean | null;\n}\n\nexport function Answer({ answer, handleAnswerQuestion, correct }: AnswerProps) {\n    const [mounted, setMounted] = useState(true);\n    const renderHTML = () => (<span className=\"AnswerText\" dangerouslySetInnerHTML={{ __html: answer }} />);\n    const handleClick = ({ nativeEvent: e }: React.MouseEvent) => {\n        handleAnswerQuestion(answer, e, correct);\n        setTimeout(() => setMounted(!mounted), 1000);\n    };\n\n    useEffect(() => removeSelectedAndShowCorrect(), [mounted]);\n\n    if (correct) {\n        return <ListItem id={answer} className=\"Answer Correct-Answer\" divider onClick={handleClick} >{renderHTML()}</ListItem>;\n    } else {\n        return <ListItem id={answer} className=\"Answer Incorrect-Answer\" divider onClick={handleClick} >{renderHTML()}</ListItem>;\n    }\n\n}","export const correctResponses = ['Correct!!', 'That\\'s Right!!', 'You got it right!', 'Good job!', 'Well done!', 'Strong work there!!']\nexport const incorrectResponses = ['Wrong', 'Not quite', 'That\\'s not it', 'Sorry', 'Uh oh', 'Whoops']\n\nexport const showFeedback = (correct?: boolean | null) => {\n    const feedback = document.querySelector('.Feedback');\n    if (!feedback) return;\n\n    if (correct) {\n        const randIdx = Math.floor(Math.random() * correctResponses.length);\n        const positiveResponse = correctResponses[randIdx];\n        feedback.textContent = positiveResponse;\n        feedback.classList.add('correct');\n    } else {\n        const randIdx = Math.floor(Math.random() * correctResponses.length);\n        const negativeResponse = incorrectResponses[randIdx];\n        feedback.textContent = negativeResponse;\n        feedback.classList.add('incorrect');\n    }\n\n    feedback?.setAttribute('style', 'display: block');\n};\n\nexport const hideFeedback = () => {\n    const feedback = document.querySelector('.Feedback');\n    if (!feedback) return;\n    feedback?.setAttribute('style', 'display: hidden');\n    feedback.textContent = '';\n    feedback.classList.remove('correct', 'incorrect');\n};","import * as React from 'react';\nimport { useRef } from 'react';\nimport { shuffle } from '../helpers/shuffle';\nimport { QuestionType } from '../redux/types';\nimport { Answer } from './Answer';\nimport { Box, Typography, List } from '@material-ui/core';\nimport { showIfCorrect } from '../helpers/addAndRemoveClass';\nimport { showFeedback, hideFeedback } from '../helpers/showFeedback';\n\ntype QuizCardProps = {\n    question: QuestionType;\n    answerQuestion: (answer: string) => void\n}\n\nexport const QuizCard = ({ question, answerQuestion }: QuizCardProps) => {\n    const chosen = useRef(false);\n    const answers: string[] = question?.incorrect_answers.concat(question.correct_answer);\n    const shuffledAnswers: string[] = shuffle(answers);\n\n    const handleAnswerQuestion = (answer: string, e: MouseEvent, correct: boolean | null | undefined): void => {\n        if (chosen.current) return;\n        chosen.current = true;\n        showIfCorrect(e, correct);\n        showFeedback(correct);\n        setTimeout(() => {\n            hideFeedback();\n            answerQuestion(answer);\n            chosen.current = false;\n        }, 1000);\n    };\n\n    return (\n        <Box className=\"QuizCard\" data-testid=\"QuizTest\">\n            <Typography variant=\"h5\" dangerouslySetInnerHTML={{ __html: question?.question }} />\n            <List className=\"QuizCardList\">\n                {shuffledAnswers.map(ans => {\n                    if (ans === question.correct_answer) {\n                        return <Answer handleAnswerQuestion={handleAnswerQuestion} answer={ans} key={ans} correct />\n                    } else {\n                        return <Answer handleAnswerQuestion={handleAnswerQuestion} answer={ans} key={ans} />;\n                    }\n                })}\n            </List>\n        </Box>\n    )\n}","export const shuffle = (array: Array<string>) => {\n    for (let i = array.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\n\n        // swap elements array[i] and array[j]\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array\n}","import * as React from 'react';\nimport { useState } from 'react';\nimport { Box, Button, TextField, FormControl, RadioGroup, FormControlLabel, Radio, FormLabel } from '@material-ui/core'\n\ntype StartProps = {\n    startGame: (amount: string, difficulty: string, type: string) => void\n}\n\nexport const Start = ({ startGame }: StartProps) => {\n    const [amount, setAmount] = useState<string>('10');\n    const [difficulty, setDifficulty] = useState<string>('');\n    const [type, setType] = useState<string>('multiple');\n\n    const handleChangeAmount = (e: React.ChangeEvent<HTMLInputElement>): void => setAmount(e.target.value);\n    const handleChangeDifficulty = (e: React.ChangeEvent<HTMLInputElement>): void => setDifficulty(e.target.value);\n    const handleChangeType = (e: React.ChangeEvent<HTMLInputElement>): void => setType(e.target.value);\n    const handleSubmit = () => startGame(amount, difficulty, type);\n\n    return (\n        <Box className=\"Start\">\n            <TextField label=\"Number of Questions\" type=\"number\" value={amount} onChange={handleChangeAmount} />\n            <FormControl component=\"fieldset\">\n                <FormLabel component=\"legend\">Difficulty</FormLabel>\n                <RadioGroup row aria-label=\"difficulty\" name=\"difficulty\" value={difficulty} onChange={handleChangeDifficulty}>\n                    <FormControlLabel value=\"easy\" control={<Radio />} label=\"Easy\" labelPlacement=\"end\" />\n                    <FormControlLabel value=\"medium\" control={<Radio />} label=\"Medium\" labelPlacement=\"end\" />\n                    <FormControlLabel value=\"hard\" control={<Radio />} label=\"Hard\" labelPlacement=\"end\" />\n                    <FormControlLabel value=\"\" control={<Radio />} label=\"Surprise Me!\" labelPlacement=\"end\" />\n                </RadioGroup>\n            </FormControl>\n            <FormControl component=\"fieldset\">\n                <FormLabel component=\"legend\">Type</FormLabel>\n                <RadioGroup row aria-label=\"type\" name=\"type\" value={type} onChange={handleChangeType}>\n                    <FormControlLabel value=\"multiple\" control={<Radio />} label=\"Multiple Choice\" labelPlacement=\"end\" />\n                    <FormControlLabel value=\"boolean\" control={<Radio />} label=\"True/False\" labelPlacement=\"end\" />\n                </RadioGroup>\n            </FormControl>\n            <Button variant=\"contained\" fullWidth color=\"primary\" onClick={handleSubmit}>Start New Game</Button>\n        </Box >\n    )\n}","import { ADD_QUESTIONS, QuestionType, QuestionsDispatchTypes, QUESTIONS_FAIL, REMOVE_QUESTIONS } from './types';\nimport { Dispatch } from 'redux';\n\nconst BASE_URL = `https://opentdb.com/api.php`;\n\nexport function getQuestions(amount = '10', difficulty?: string, type = 'multiple',) {\n\treturn async function (dispatch: Dispatch) {\n\t\ttry {\n\t\t\tif (difficulty) {\n\t\t\t\tconst response = await fetch(`${BASE_URL}?amount=${amount}&type=${type}&difficulty=${difficulty}`);\n\t\t\t\tconst data = await response.json();\n\t\t\t\tdispatch(gotQuestions(data));\n\t\t\t} else {\n\t\t\t\tconst response = await fetch(`${BASE_URL}?amount=${amount}&type=${type}`);\n\t\t\t\tconst data = await response.json();\n\t\t\t\tdispatch(gotQuestions(data));\n\t\t\t}\n\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tdispatch(questionsFail());\n\t\t}\n\t};\n}\n\nexport function gotQuestions(questionData: any): QuestionsDispatchTypes {\n\tconst payload = questionData.results.map((data: QuestionType) => {\n\t\tconst { question, correct_answer, incorrect_answers }: QuestionType = data;\n\t\treturn { question, correct_answer, incorrect_answers };\n\t});\n\treturn {\n\t\ttype: ADD_QUESTIONS,\n\t\tpayload\n\t};\n}\n\nexport function removeQuestions(): QuestionsDispatchTypes {\n\treturn {\n\t\ttype: REMOVE_QUESTIONS\n\t}\n}\n\nexport function questionsFail(): QuestionsDispatchTypes {\n\treturn {\n\t\ttype: QUESTIONS_FAIL\n\t};\n}\n","export const ADD_QUESTIONS = 'ADD_QUESTIONS';\nexport const REMOVE_QUESTIONS = 'REMOVE_QUESTIONS';\nexport const QUESTIONS_FAIL = 'QUESTIONS_FAIL';\n\ninterface Question {\n\tquestion: string;\n\tcorrect_answer: string;\n\tincorrect_answers: string[];\n\t[propName: string]: any;\n}\n\ninterface AddQuestions {\n\ttype: typeof ADD_QUESTIONS;\n\tpayload: Question[];\n}\n\ninterface QuestionsFail {\n\ttype: typeof QUESTIONS_FAIL;\n}\n\ninterface RemoveQuestions {\n\ttype: typeof REMOVE_QUESTIONS;\n}\n\nexport type QuestionType = Question;\nexport type QuestionsDispatchTypes = AddQuestions | QuestionsFail | RemoveQuestions;\n","import * as React from 'react';\n\n\n\nexport const Feedback = () => (< p className=\"Feedback\" data-testid=\"Feedback\" />)","import React, { useEffect, useState } from 'react';\nimport { QuestionType } from '../redux/types';\nimport { Result } from './Result';\nimport { QuizCard } from './QuizCard'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { StoreType } from '../redux/store';\nimport { Start } from '../components/Start';\nimport { getQuestions, removeQuestions } from '../redux/actions';\nimport { Box } from '@material-ui/core';\nimport { Feedback } from './Feedback'\n\nconst INITIAL_QUESTION_STATE = {\n\tquestion: '',\n\tcorrect_answer: '',\n\tincorrect_answers: []\n}\n\nexport const TriviaGame = () => {\n\tconst dispatch = useDispatch()\n\tconst questions = useSelector((state: StoreType) => state.questions);\n\tconst [currentQuestion, setCurrentQuestion] = useState<QuestionType>(INITIAL_QUESTION_STATE);\n\tconst [numAnswered, setNumAnswered] = useState(0);\n\tconst [numCorrect, setNumCorrect] = useState(0);\n\n\tconst answerQuestion = (answer: string) => {\n\t\tif (currentQuestion && answer === currentQuestion.correct_answer) {\n\t\t\tsetNumCorrect((correct) => correct + 1);\n\t\t\tsetNumAnswered((answered) => answered + 1);\n\t\t} else {\n\t\t\tsetNumAnswered((answered) => answered + 1);\n\t\t}\n\t};\n\n\tconst startGame = (amount: string, difficulty: string, type: string): void => {\n\t\tdispatch(removeQuestions())\n\t\tdispatch(getQuestions(amount, difficulty, type));\n\t\tsetCurrentQuestion(() => INITIAL_QUESTION_STATE);\n\t\tsetNumCorrect(() => 0);\n\t\tsetNumAnswered(() => 0);\n\t}\n\n\tuseEffect(() => {\n\t\tif (questions.length) setCurrentQuestion(() => questions[numAnswered]);\n\t}, [questions, numAnswered])\n\n\n\treturn (\n\t\t<Box className=\"TriviaGame\">\n\n\t\t\t{numAnswered < questions.length && currentQuestion !== INITIAL_QUESTION_STATE && <QuizCard question={currentQuestion} answerQuestion={answerQuestion} />}\n\n\t\t\t{ questions.length !== 0 && numAnswered === questions.length && <Result numCorrect={numCorrect} numAnswered={numAnswered} />}\n\n\t\t\t{(numAnswered === questions.length || !questions.length) && <Start startGame={startGame} />}\n\n\t\t\t<Feedback />\n\t\t</Box>\n\n\t);\n};","import React from 'react';\n\nexport const Footer = () => {\n    return (\n        <footer className=\"Footer\">\n            <p>\n                <a data-testid=\"footer\" href=\"https://github.com/druserkes\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    Dru Serkes &copy;2020\n\t\t\t\t</a>\n            </p>\n        </footer>\n    );\n};\n","import React from 'react';\nimport './App.css';\nimport { TriviaGame } from './components/TriviaGame';\nimport { Typography, Box } from '@material-ui/core';\nimport { Footer } from './components/Footer';\n\n\nfunction App() {\n      return (\n            <Box className=\"App\">\n                  <Typography gutterBottom variant=\"h1\">Let's Trivia!</Typography>\n                  <TriviaGame />\n                  <Footer />\n            </Box>);\n}\n\nexport default App;\n","import { ADD_QUESTIONS, REMOVE_QUESTIONS, QuestionType, QUESTIONS_FAIL, QuestionsDispatchTypes } from './types';\n\nconst INITIAL_STATE: QuestionType[] = [];\n\nconst questionsReducer = (state = INITIAL_STATE, action: QuestionsDispatchTypes): QuestionType[] => {\n\tswitch (action.type) {\n\t\tcase ADD_QUESTIONS:\n\t\t\treturn [...action.payload];\n\t\tcase REMOVE_QUESTIONS:\n\t\t\treturn [];\n\t\tcase QUESTIONS_FAIL:\n\t\t\treturn [{ question: 'there was an error, please try again', correct_answer: '', incorrect_answers: [] }];\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default questionsReducer;\n","import questionsReducer from './questionsReducer';\nimport { combineReducers } from 'redux';\n\nconst rootReducer = combineReducers({ questions: questionsReducer });\n\nexport default rootReducer;\n","import { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './rootReducer';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport type StoreType = ReturnType<typeof rootReducer>;\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}